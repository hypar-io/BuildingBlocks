
// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar test generate'.
// DO NOT EDIT THIS FILE.

using Elements;
using Xunit;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using Elements.Geometry;

namespace EnvelopeBySite
{
    public class EnvelopeBySiteOverridesTest
    {
        [Fact]
        public void OverridesTestExecute()
        {
            var input = GetInput();

            var modelDependencies = new Dictionary<string, Model> { 
                {"Site", Model.FromJson(File.ReadAllText("../../../EnvelopeBySiteOverridesTest/EnvelopeBySiteOverridesTest/model_dependencies/Site/6fc95c5b-4a88-43a8-bd9f-c61aad8b6fb9.json")) }, 
            };

            var result = EnvelopeBySite.Execute(modelDependencies, input);
            var envelopes = result.Model.AllElementsOfType<Envelope>().OrderBy(e => e.Elevation).ToList();
            int expectedCount = 4;
            Assert.Equal(expectedCount, envelopes.Count);

            var expectedElevations = new double[] { -10.0, 0.0, 20.0, 40.0 };
            var expectedHeights = new double[] { 10.0, 20.0, 20.0, 20.0 };

            var polygon1 = new Polygon(
                (X: 41.6454, Y: -39.0087, Z: -10.0000),
                (X: 40.5448, Y: 19.7913, Z: -10.0000),
                (X: 0.0562, Y: 40.9638, Z: -10.0000),
                (X: -45.1528, Y: 40.1177, Z: -10.0000),
                (X: -43.6420, Y: -40.6049, Z: -10.0000)
            );

            var polygon2 = new Polygon(
                (X: 27.6625, Y: -39.2704, Z: 0.0000),
                (X: 40.5448, Y: 19.7913, Z: 0.0000),
                (X: 0.0562, Y: 40.9638, Z: 0.0000),
                (X: -40.8393, Y: 20.8664, Z: 0.0000),
                (X: -31.5534, Y: -40.3787, Z: 0.0000)
            );

            var polygon3 = new Polygon(
                (X: 26.8538, Y: -38.2853, Z: 20.0000),
                (X: 39.4052, Y: 19.2587, Z: 20.0000),
                (X: 0.0421, Y: 39.8427, Z: 20.0000),
                (X: -39.7408, Y: 20.2920, Z: 20.0000),
                (X: -30.6960, Y: -39.3625, Z: 20.0000)
            );

            var polygon4 = new Polygon(
                (X: 3.1796, Y: -2.9701, Z: 40.0000),
                (X: 10.2815, Y: 17.8574, Z: 40.0000),
                (X: 0.0281, Y: 38.7216, Z: 40.0000),
                (X: -22.1177, Y: 17.3394, Z: 40.0000),
                (X: -21.5261, Y: -15.1113, Z: 40.0000)
            );

            var expectedPerimeters = new Polygon[] { polygon1, polygon2, polygon3, polygon4 };

            for ( int i = 0; i < envelopes.Count; i++ )
            {
                var envelope = envelopes[i];
                Assert.Equal(expectedElevations[i], envelope.Elevation, 4);
                Assert.Equal(expectedHeights[i], envelope.Height, 4);
                Assert.True(expectedPerimeters[i].IsAlmostEqualTo(envelope.Perimeter, 1E-04));
            }
        }

        public EnvelopeBySiteInputs GetInput()
        {
            var json = File.ReadAllText("../../../EnvelopeBySiteOverridesTest/EnvelopeBySiteOverridesTest/inputs.json");
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EnvelopeBySiteInputs>(json);
        }
    }
}