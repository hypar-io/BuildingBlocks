// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace PlanByProgram
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class PlanByProgramInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public PlanByProgramInputs(double @suiteRatio, double @corridorWidth, double @plenumHeight, bool @multipleLevels, bool @diagonalAdjacency, bool @conformFloorsToRooms, PlanByProgramInputsSuitePlanType @suitePlanType, PlanByProgramInputsPrimaryDirection @primaryDirection, PlanByProgramInputsCoordinateAdjacency @coordinateAdjacency, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<PlanByProgramInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @suiteRatio, @corridorWidth, @plenumHeight, @multipleLevels, @diagonalAdjacency, @conformFloorsToRooms, @suitePlanType, @primaryDirection, @coordinateAdjacency});
            }
        
            this.SuiteRatio = @suiteRatio;
            this.CorridorWidth = @corridorWidth;
            this.PlenumHeight = @plenumHeight;
            this.MultipleLevels = @multipleLevels;
            this.DiagonalAdjacency = @diagonalAdjacency;
            this.ConformFloorsToRooms = @conformFloorsToRooms;
            this.SuitePlanType = @suitePlanType;
            this.PrimaryDirection = @primaryDirection;
            this.CoordinateAdjacency = @coordinateAdjacency;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Desired x-to-y ratio of Suites.</summary>
        [Newtonsoft.Json.JsonProperty("Suite Ratio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.5D, 2.0D)]
        public double SuiteRatio { get; set; } = 1.2000000000000002D;
    
        /// <summary>Width of all corridors.</summary>
        [Newtonsoft.Json.JsonProperty("Corridor Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2.0D, 4.0D)]
        public double CorridorWidth { get; set; } = 3D;
    
        /// <summary>Vertical distance from highest room to next level above..</summary>
        [Newtonsoft.Json.JsonProperty("Plenum Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, 3.0D)]
        public double PlenumHeight { get; set; } = 1.5D;
    
        /// <summary>When adjacency fails, move up one story.</summary>
        [Newtonsoft.Json.JsonProperty("Multiple Levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MultipleLevels { get; set; }
    
        /// <summary>Diagonal suite placement is considered adjacent to previous suite.</summary>
        [Newtonsoft.Json.JsonProperty("Diagonal Adjacency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DiagonalAdjacency { get; set; }
    
        /// <summary>Creates floors conforming to the merged shape of suite Rooms.</summary>
        [Newtonsoft.Json.JsonProperty("Conform Floors to Rooms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ConformFloorsToRooms { get; set; }
    
        /// <summary>Axis: Rooms to either side of an axis. Reciprocal: Rooms fitted within a boundary of the suite area at the input ratio.</summary>
        [Newtonsoft.Json.JsonProperty("Suite Plan Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlanByProgramInputsSuitePlanType SuitePlanType { get; set; } = PlanByProgramInputsSuitePlanType.Axis;
    
        /// <summary>Selects the relative location to attempt compact suite adjacency.</summary>
        [Newtonsoft.Json.JsonProperty("Primary Direction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlanByProgramInputsPrimaryDirection PrimaryDirection { get; set; } = PlanByProgramInputsPrimaryDirection.Northeast;
    
        /// <summary>Selects the relative lateral relationship between suites.</summary>
        [Newtonsoft.Json.JsonProperty("Coordinate Adjacency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlanByProgramInputsCoordinateAdjacency CoordinateAdjacency { get; set; } = PlanByProgramInputsCoordinateAdjacency.Minimum;
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PlanByProgramInputsSuitePlanType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Axis")]
        Axis = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Reciprocal")]
        Reciprocal = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PlanByProgramInputsPrimaryDirection
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Northeast")]
        Northeast = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Southwest")]
        Southwest = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PlanByProgramInputsCoordinateAdjacency
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,
    
    }
}