// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace LevelsFromFloors
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public  class LevelsFromFloorsInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public LevelsFromFloorsInputs(bool @constructVolumeAtTopLevel, double @defaultLevelHeight, double @floorMergeTolerance, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<LevelsFromFloorsInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @constructVolumeAtTopLevel, @defaultLevelHeight, @floorMergeTolerance});
            }
        
            this.ConstructVolumeAtTopLevel = @constructVolumeAtTopLevel;
            this.DefaultLevelHeight = @defaultLevelHeight;
            this.FloorMergeTolerance = @floorMergeTolerance;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Whether or not to construct a level volume at the topmost level of any stack of floors</summary>
        [Newtonsoft.Json.JsonProperty("Construct Volume at top level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ConstructVolumeAtTopLevel { get; set; } = true;
    
        /// <summary>The distance to the next highest floor will typically determine level height, but if no next floor is present, this value will govern the height.</summary>
        [Newtonsoft.Json.JsonProperty("Default Level Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double DefaultLevelHeight { get; set; } = 4D;
    
        /// <summary>This number is used to determine if two floors are close enough to be merged into one level. If 0, no merging will occur. This is useful in cases of Revit export, where a given "floor" might be modeled as separate floor elements.</summary>
        [Newtonsoft.Json.JsonProperty("Floor Merge Tolerance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FloorMergeTolerance { get; set; } = 1D;
    
    }
}