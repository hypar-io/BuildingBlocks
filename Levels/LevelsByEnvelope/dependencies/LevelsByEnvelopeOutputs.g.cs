// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace LevelsByEnvelope
{
    public class LevelsByEnvelopeOutputs: SystemResults
    {
		/// <summary>
		/// Total number of levels.
		/// </summary>
		[JsonProperty("Level Quantity")]
		public double LevelQuantity {get; set;}

		/// <summary>
		/// Total aggregate area of all levels.
		/// </summary>
		[JsonProperty("Total Level Area")]
		public double TotalLevelArea {get; set;}

		/// <summary>
		/// Height of the ground level.
		/// </summary>
		[JsonProperty("Entry Level Height")]
		public double EntryLevelHeight {get; set;}

		/// <summary>
		/// Height of the standard levels.
		/// </summary>
		[JsonProperty("Repeating Level Height")]
		public double RepeatingLevelHeight {get; set;}

		/// <summary>
		/// Height of the penthouse level.
		/// </summary>
		[JsonProperty("Top Level Height")]
		public double TopLevelHeight {get; set;}



        /// <summary>
        /// Construct a LevelsByEnvelopeOutputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public LevelsByEnvelopeOutputs() : base()
        {

        }


        /// <summary>
        /// Construct a LevelsByEnvelopeOutputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public LevelsByEnvelopeOutputs(double levelQuantity, double totalLevelArea, double entryLevelHeight, double repeatingLevelHeight, double topLevelHeight): base()
        {
			this.LevelQuantity = levelQuantity;
			this.TotalLevelArea = totalLevelArea;
			this.EntryLevelHeight = entryLevelHeight;
			this.RepeatingLevelHeight = repeatingLevelHeight;
			this.TopLevelHeight = topLevelHeight;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}