// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace RoofBySketch
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class RoofBySketchInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public RoofBySketchInputs(Mesh @mesh, double @thickness, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<RoofBySketchInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @mesh, @thickness});
            }
        
            this.Mesh = @mesh;
            this.Thickness = @thickness;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Mesh", Required = Newtonsoft.Json.Required.AllowNull)]
        public Mesh Mesh { get; set; }
    
        /// <summary>Thickness of the Roof from its lowest point to its underside.</summary>
        [Newtonsoft.Json.JsonProperty("Thickness", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.1D, 1.0D)]
        public double Thickness { get; set; } = 0.2D;
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class Triangles 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public Triangles(IList<int> @vertexIndices)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Triangles>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @vertexIndices});
            }
        
            this.VertexIndices = @vertexIndices;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>The vertices that bound these triangles, identified by the 'index' field inside vertices in the 'vertices' collection.</summary>
        [Newtonsoft.Json.JsonProperty("vertexIndices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<int> VertexIndices { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class Vertices 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public Vertices(int @index, bool @isBoundary, Vector3 @position)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Vertices>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @index, @isBoundary, @position});
            }
        
            this.Index = @index;
            this.IsBoundary = @isBoundary;
            this.Position = @position;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Identifier for this vertex within the mesh.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Index { get; set; }
    
        /// <summary>Whether the vertex represents an boundary of the mesh. That is, whether attached edges may bound a single face rather than two.</summary>
        [Newtonsoft.Json.JsonProperty("isBoundary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsBoundary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vector3 Position { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    }
}