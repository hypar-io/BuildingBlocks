// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace ColumnsFromGrid
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public  class ColumnsFromGridInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public ColumnsFromGridInputs(double @height, double @width, double @depth, double @finishThickness, bool @createAllColumns, bool @perimeterColumns, Overrides @overrides, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ColumnsFromGridInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @height, @width, @depth, @finishThickness, @createAllColumns, @perimeterColumns, @overrides});
            }
        
            this.Height = @height;
            this.Width = @width;
            this.Depth = @depth;
            this.FinishThickness = @finishThickness;
            this.CreateAllColumns = @createAllColumns;
            this.PerimeterColumns = @perimeterColumns;
            this.Overrides = @overrides ?? this.Overrides;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Default height for columns, if it can't be inferred from context.</summary>
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.1D, double.MaxValue)]
        public double Height { get; set; } = 4D;
    
        /// <summary>Default width for columns.</summary>
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.2D, 2D)]
        public double Width { get; set; }
    
        /// <summary>Default depth for columns.</summary>
        [Newtonsoft.Json.JsonProperty("Depth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.2D, 2D)]
        public double Depth { get; set; }
    
        /// <summary>Default finish thickness for structural columns.</summary>
        [Newtonsoft.Json.JsonProperty("Finish Thickness", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.05D, 2D)]
        public double FinishThickness { get; set; }
    
        /// <summary>Should create columns at all grid intersections by default</summary>
        [Newtonsoft.Json.JsonProperty("Create All Columns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CreateAllColumns { get; set; } = false;
    
        /// <summary>Should create all perimeter columns by default</summary>
        [Newtonsoft.Json.JsonProperty("Perimeter Columns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PerimeterColumns { get; set; } = false;
    
        [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overrides Overrides { get; set; } = new Overrides();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class Overrides 
    
    {
        public Overrides() { }
        
        [Newtonsoft.Json.JsonConstructor]
        public Overrides(OverrideAdditions @additions, OverrideRemovals @removals, IList<ColumnPositionsOverride> @columnPositions, IList<GridlinesOptionsOverride> @gridlinesOptions, IList<SizesOverride> @sizes)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Overrides>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @additions, @removals, @columnPositions, @gridlinesOptions, @sizes});
            }
        
            this.Additions = @additions ?? this.Additions;
            this.Removals = @removals ?? this.Removals;
            this.ColumnPositions = @columnPositions ?? this.ColumnPositions;
            this.GridlinesOptions = @gridlinesOptions ?? this.GridlinesOptions;
            this.Sizes = @sizes ?? this.Sizes;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Additions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideAdditions Additions { get; set; } = new OverrideAdditions();
    
        [Newtonsoft.Json.JsonProperty("Removals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideRemovals Removals { get; set; } = new OverrideRemovals();
    
        [Newtonsoft.Json.JsonProperty("Column Positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<ColumnPositionsOverride> ColumnPositions { get; set; } = new List<ColumnPositionsOverride>();
    
        [Newtonsoft.Json.JsonProperty("Gridlines Options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<GridlinesOptionsOverride> GridlinesOptions { get; set; } = new List<GridlinesOptionsOverride>();
    
        [Newtonsoft.Json.JsonProperty("Sizes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<SizesOverride> Sizes { get; set; } = new List<SizesOverride>();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class OverrideAdditions 
    
    {
        public OverrideAdditions() { }
        
        [Newtonsoft.Json.JsonConstructor]
        public OverrideAdditions(IList<ColumnPositionsOverrideAddition> @columnPositions)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<OverrideAdditions>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @columnPositions});
            }
        
            this.ColumnPositions = @columnPositions ?? this.ColumnPositions;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Column Positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<ColumnPositionsOverrideAddition> ColumnPositions { get; set; } = new List<ColumnPositionsOverrideAddition>();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class OverrideRemovals 
    
    {
        public OverrideRemovals() { }
        
        [Newtonsoft.Json.JsonConstructor]
        public OverrideRemovals(IList<ColumnPositionsOverrideRemoval> @columnPositions)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<OverrideRemovals>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @columnPositions});
            }
        
            this.ColumnPositions = @columnPositions ?? this.ColumnPositions;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Column Positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<ColumnPositionsOverrideRemoval> ColumnPositions { get; set; } = new List<ColumnPositionsOverrideRemoval>();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class ColumnPositionsOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public ColumnPositionsOverride(string @id, ColumnPositionsIdentity @identity, ColumnPositionsValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ColumnPositionsOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColumnPositionsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColumnPositionsValue Value { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class GridlinesOptionsOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridlinesOptionsOverride(string @id, GridlinesOptionsIdentity @identity, GridlinesOptionsValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridlinesOptionsOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridlinesOptionsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridlinesOptionsValue Value { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class SizesOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public SizesOverride(string @id, SizesIdentity @identity, SizesValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<SizesOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SizesIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SizesValue Value { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class ColumnPositionsOverrideAddition 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public ColumnPositionsOverrideAddition(string @id, ColumnPositionsIdentity @identity, ColumnPositionsOverrideAdditionValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ColumnPositionsOverrideAddition>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColumnPositionsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColumnPositionsOverrideAdditionValue Value { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class ColumnPositionsOverrideRemoval 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public ColumnPositionsOverrideRemoval(string @id, ColumnPositionsIdentity @identity)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ColumnPositionsOverrideRemoval>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity});
            }
        
            this.Id = @id;
            this.Identity = @identity;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColumnPositionsIdentity Identity { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class ColumnPositionsIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public ColumnPositionsIdentity(string @name, double @levelElevation)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ColumnPositionsIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @name, @levelElevation});
            }
        
            this.Name = @name;
            this.LevelElevation = @levelElevation;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Level Elevation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double LevelElevation { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class ColumnPositionsValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public ColumnPositionsValue(Vector3 @location)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ColumnPositionsValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @location});
            }
        
            this.Location = @location;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vector3 Location { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class GridlinesOptionsIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridlinesOptionsIdentity(string @name)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridlinesOptionsIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @name});
            }
        
            this.Name = @name;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class GridlinesOptionsValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridlinesOptionsValue(bool @createColumns)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridlinesOptionsValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @createColumns});
            }
        
            this.CreateColumns = @createColumns;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Create Columns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CreateColumns { get; set; } = false;
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class SizesIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public SizesIdentity(string @name, double @levelElevation)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<SizesIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @name, @levelElevation});
            }
        
            this.Name = @name;
            this.LevelElevation = @levelElevation;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Level Elevation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double LevelElevation { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class SizesValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public SizesValue(double @width, double @height, double @depth, double @finishThickness)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<SizesValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @width, @height, @depth, @finishThickness});
            }
        
            this.Width = @width;
            this.Height = @height;
            this.Depth = @depth;
            this.FinishThickness = @finishThickness;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.2D, 2D)]
        public double Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.1D, double.MaxValue)]
        public double Height { get; set; } = 4D;
    
        [Newtonsoft.Json.JsonProperty("Depth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.2D, 2D)]
        public double Depth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Finish Thickness", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.05D, 2D)]
        public double FinishThickness { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class ColumnPositionsOverrideAdditionValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public ColumnPositionsOverrideAdditionValue(Vector3 @location)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ColumnPositionsOverrideAdditionValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @location});
            }
        
            this.Location = @location;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vector3 Location { get; set; }
    
    }
}