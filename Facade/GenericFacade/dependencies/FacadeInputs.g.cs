// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Facade
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class FacadeInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public FacadeInputs(Overrides @overrides, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FacadeInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @overrides});
            }
        
            this.Overrides = @overrides;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overrides Overrides { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class Overrides 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public Overrides(IList<FacadeTypeSettingsOverride> @facadeTypeSettings)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Overrides>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @facadeTypeSettings});
            }
        
            this.FacadeTypeSettings = @facadeTypeSettings;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Facade Type Settings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<FacadeTypeSettingsOverride> FacadeTypeSettings { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class FacadeTypeSettingsOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public FacadeTypeSettingsOverride(string @id, FacadeTypeSettingsIdentity @identity, FacadeTypeSettingsValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FacadeTypeSettingsOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FacadeTypeSettingsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FacadeTypeSettingsValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class FacadeTypeSettingsIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public FacadeTypeSettingsIdentity(string @name)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FacadeTypeSettingsIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @name});
            }
        
            this.Name = @name;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class FacadeTypeSettingsValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public FacadeTypeSettingsValue(bool? @createGenericFacade, FacadeTypeSettingsValueMaterial @material, double @thickness, double @offset, bool @mullions, FacadeTypeSettingsValueMullionSettings @mullionSettings, bool @horizontalSpandrel, FacadeTypeSettingsValueHorizontalSpandrelSettings @horizontalSpandrelSettings, bool @verticalSpandrel, FacadeTypeSettingsValueVerticalSpandrelSettings @verticalSpandrelSettings)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FacadeTypeSettingsValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @createGenericFacade, @material, @thickness, @offset, @mullions, @mullionSettings, @horizontalSpandrel, @horizontalSpandrelSettings, @verticalSpandrel, @verticalSpandrelSettings});
            }
        
            this.CreateGenericFacade = @createGenericFacade;
            this.Material = @material;
            this.Thickness = @thickness;
            this.Offset = @offset;
            this.Mullions = @mullions;
            this.MullionSettings = @mullionSettings;
            this.HorizontalSpandrel = @horizontalSpandrel;
            this.HorizontalSpandrelSettings = @horizontalSpandrelSettings;
            this.VerticalSpandrel = @verticalSpandrel;
            this.VerticalSpandrelSettings = @verticalSpandrelSettings;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Create Generic Facade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CreateGenericFacade { get; set; } = true;
    
        [Newtonsoft.Json.JsonProperty("Material", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FacadeTypeSettingsValueMaterial Material { get; set; }
    
        /// <summary>Overall thickness of the panel</summary>
        [Newtonsoft.Json.JsonProperty("Thickness", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 0.5D)]
        public double Thickness { get; set; } = 0D;
    
        /// <summary>Offset from the facade plane</summary>
        [Newtonsoft.Json.JsonProperty("Offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 0.5D)]
        public double Offset { get; set; } = 0D;
    
        [Newtonsoft.Json.JsonProperty("Mullions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Mullions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Mullion Settings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FacadeTypeSettingsValueMullionSettings MullionSettings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Horizontal Spandrel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HorizontalSpandrel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Horizontal Spandrel Settings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FacadeTypeSettingsValueHorizontalSpandrelSettings HorizontalSpandrelSettings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Vertical Spandrel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VerticalSpandrel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Vertical Spandrel Settings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FacadeTypeSettingsValueVerticalSpandrelSettings VerticalSpandrelSettings { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class FacadeTypeSettingsValueMaterial 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public FacadeTypeSettingsValueMaterial(Color @color, double @opacity, double @shine)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FacadeTypeSettingsValueMaterial>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @color, @opacity, @shine});
            }
        
            this.Color = @color;
            this.Opacity = @opacity;
            this.Shine = @shine;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Color Color { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Opacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1.0D)]
        public double Opacity { get; set; } = 0.5D;
    
        [Newtonsoft.Json.JsonProperty("Shine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1.0D)]
        public double Shine { get; set; } = 0.3D;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class FacadeTypeSettingsValueMullionSettings 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public FacadeTypeSettingsValueMullionSettings(double @width, double @depth, double? @verticalSpacing, double? @horizontalSpacing, FacadeTypeSettingsValueMaterial @material)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FacadeTypeSettingsValueMullionSettings>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @width, @depth, @verticalSpacing, @horizontalSpacing, @material});
            }
        
            this.Width = @width;
            this.Depth = @depth;
            this.VerticalSpacing = @verticalSpacing;
            this.HorizontalSpacing = @horizontalSpacing;
            this.Material = @material;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Width { get; set; } = 0.1D;
    
        [Newtonsoft.Json.JsonProperty("Depth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Depth { get; set; } = 0.2D;
    
        /// <summary>If set, additional vertical mullions will be created at the specified spacing, if the panel is wider than the spacing value.</summary>
        [Newtonsoft.Json.JsonProperty("Vertical Spacing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VerticalSpacing { get; set; }
    
        /// <summary>If set, additional horizontal mullions will be created at the specified spacing, if the panel is wider than the spacing value.</summary>
        [Newtonsoft.Json.JsonProperty("Horizontal Spacing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HorizontalSpacing { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Material", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FacadeTypeSettingsValueMaterial Material { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class FacadeTypeSettingsValueHorizontalSpandrelSettings 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public FacadeTypeSettingsValueHorizontalSpandrelSettings(double @height, FacadeTypeSettingsValueMaterial @material)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FacadeTypeSettingsValueHorizontalSpandrelSettings>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @height, @material});
            }
        
            this.Height = @height;
            this.Material = @material;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Height { get; set; } = 1D;
    
        [Newtonsoft.Json.JsonProperty("Material", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FacadeTypeSettingsValueMaterial Material { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class FacadeTypeSettingsValueVerticalSpandrelSettings 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public FacadeTypeSettingsValueVerticalSpandrelSettings(double @width, FacadeTypeSettingsValueMaterial @material)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FacadeTypeSettingsValueVerticalSpandrelSettings>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @width, @material});
            }
        
            this.Width = @width;
            this.Material = @material;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Width { get; set; } = 1D;
    
        [Newtonsoft.Json.JsonProperty("Material", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FacadeTypeSettingsValueMaterial Material { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
}