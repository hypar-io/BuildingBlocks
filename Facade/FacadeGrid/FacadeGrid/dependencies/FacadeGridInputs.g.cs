// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace FacadeGrid
{
    #pragma warning disable // Disable all warnings

    /// <summary>A simplified schema for a 1d grid used for a special geometry input</summary>
    [Newtonsoft.Json.JsonConverter(typeof(Elements.Serialization.JSON.JsonInheritanceConverter), "discriminator")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class Grid1dInput 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public Grid1dInput(Polyline @curve, IList<Vector3> @splitPoints, Grid1dInputSubdivisionMode? @subdivisionMode, SubdivisionSettings @subdivisionSettings)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Grid1dInput>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @curve, @splitPoints, @subdivisionMode, @subdivisionSettings});
            }
        
            this.Curve = @curve;
            this.SplitPoints = @splitPoints;
            this.SubdivisionMode = @subdivisionMode;
            this.SubdivisionSettings = @subdivisionSettings;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>The base curve for the grid</summary>
        [Newtonsoft.Json.JsonProperty("Curve", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polyline Curve { get; set; }
    
        /// <summary>The points at which the grid is split</summary>
        [Newtonsoft.Json.JsonProperty("SplitPoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Vector3> SplitPoints { get; set; }
    
        /// <summary>How is this curve subdivided</summary>
        [Newtonsoft.Json.JsonProperty("SubdivisionMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Grid1dInputSubdivisionMode? SubdivisionMode { get; set; } = Grid1dInputSubdivisionMode.Manual;
    
        /// <summary>What parameters drive the subdivision?</summary>
        [Newtonsoft.Json.JsonProperty("SubdivisionSettings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubdivisionSettings SubdivisionSettings { get; set; }
    
    
    }
    
    /// <summary>A simplified schema for a 2d grid</summary>
    [Newtonsoft.Json.JsonConverter(typeof(Elements.Serialization.JSON.JsonInheritanceConverter), "discriminator")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class Grid2dInput 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public Grid2dInput(Grid1dInput @u, Grid1dInput @v)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Grid2dInput>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @u, @v});
            }
        
            this.U = @u;
            this.V = @v;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>The 1d grid in the U axis</summary>
        [Newtonsoft.Json.JsonProperty("U", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Grid1dInput U { get; set; }
    
        /// <summary>The 1d grid in the V axis</summary>
        [Newtonsoft.Json.JsonProperty("V", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Grid1dInput V { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class FacadeGridInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public FacadeGridInputs(FacadeGridInputsDisplayMode @displayMode, Overrides @overrides, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FacadeGridInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @displayMode, @overrides});
            }
        
            this.DisplayMode = @displayMode;
            this.Overrides = @overrides;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Display Mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FacadeGridInputsDisplayMode DisplayMode { get; set; } = FacadeGridInputsDisplayMode.By_Type_and_Size;
    
        [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overrides Overrides { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Grid1dInputSubdivisionMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Divide by count")]
        Divide_by_count = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Divide by approximate length")]
        Divide_by_approximate_length = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Divide by fixed length")]
        Divide_by_fixed_length = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Divide by pattern")]
        Divide_by_pattern = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class SubdivisionSettings 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public SubdivisionSettings(int @count, double @targetLength, double @length, SubdivisionSettingsRemainderMode @remainderMode, SubdivisionSettingsCycleMode @cycleMode)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<SubdivisionSettings>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @count, @targetLength, @length, @remainderMode, @cycleMode});
            }
        
            this.Count = @count;
            this.TargetLength = @targetLength;
            this.Length = @length;
            this.RemainderMode = @remainderMode;
            this.CycleMode = @cycleMode;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; } = 1;
    
        [Newtonsoft.Json.JsonProperty("Target Length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TargetLength { get; set; } = 1D;
    
        [Newtonsoft.Json.JsonProperty("Length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Length { get; set; } = 1D;
    
        [Newtonsoft.Json.JsonProperty("Remainder Mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubdivisionSettingsRemainderMode RemainderMode { get; set; } = SubdivisionSettingsRemainderMode.Remainder_at_both_ends;
    
        [Newtonsoft.Json.JsonProperty("Cycle Mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubdivisionSettingsCycleMode CycleMode { get; set; } = SubdivisionSettingsCycleMode.Cycle;
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FacadeGridInputsDisplayMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"By Size")]
        By_Size = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"By Type")]
        By_Type = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"By Type and Size")]
        By_Type_and_Size = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Highlight Irregular")]
        Highlight_Irregular = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class Overrides 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public Overrides(IList<GridDefaultsOverride> @gridDefaults, IList<GridDefaultsEnvelopeOverride> @gridDefaultsEnvelope, IList<GridsOverride> @grids)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Overrides>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @gridDefaults, @gridDefaultsEnvelope, @grids});
            }
        
            this.GridDefaults = @gridDefaults;
            this.GridDefaultsEnvelope = @gridDefaultsEnvelope;
            this.Grids = @grids;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Grid Defaults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<GridDefaultsOverride> GridDefaults { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Grid Defaults - Envelope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<GridDefaultsEnvelopeOverride> GridDefaultsEnvelope { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Grids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<GridsOverride> Grids { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SubdivisionSettingsRemainderMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Remainder at end")]
        Remainder_at_end = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Remainder at start")]
        Remainder_at_start = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Remainder at both ends")]
        Remainder_at_both_ends = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SubdivisionSettingsCycleMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Repeat Last")]
        Repeat_Last = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Cycle")]
        Cycle = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Wrap")]
        Wrap = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class GridDefaultsOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridDefaultsOverride(string @id, GridDefaultsIdentity @identity, GridDefaultsValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridDefaultsOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridDefaultsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridDefaultsValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class GridDefaultsEnvelopeOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridDefaultsEnvelopeOverride(string @id, GridDefaultsEnvelopeIdentity @identity, GridDefaultsEnvelopeValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridDefaultsEnvelopeOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridDefaultsEnvelopeIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridDefaultsEnvelopeValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class GridsOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridsOverride(string @id, GridsIdentity @identity, GridsValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridsOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GridsValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class GridDefaultsIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridDefaultsIdentity(Polygon @boundary, Profile @profile, string @buildingName)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridDefaultsIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @boundary, @profile, @buildingName});
            }
        
            this.Boundary = @boundary;
            this.Profile = @profile;
            this.BuildingName = @buildingName;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Boundary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon Boundary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Profile Profile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Building Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class GridDefaultsValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridDefaultsValue(double @typicalPanelWidth, string @facadeTypeName, double @parapetHeight)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridDefaultsValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @typicalPanelWidth, @facadeTypeName, @parapetHeight});
            }
        
            this.TypicalPanelWidth = @typicalPanelWidth;
            this.FacadeTypeName = @facadeTypeName;
            this.ParapetHeight = @parapetHeight;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Typical Panel Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TypicalPanelWidth { get; set; } = 3D;
    
        [Newtonsoft.Json.JsonProperty("Facade Type Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FacadeTypeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Parapet Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ParapetHeight { get; set; } = 0D;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class GridDefaultsEnvelopeIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridDefaultsEnvelopeIdentity(Polygon @boundary, Profile @profile, string @buildingName)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridDefaultsEnvelopeIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @boundary, @profile, @buildingName});
            }
        
            this.Boundary = @boundary;
            this.Profile = @profile;
            this.BuildingName = @buildingName;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Boundary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon Boundary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Profile Profile { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Building Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BuildingName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class GridDefaultsEnvelopeValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridDefaultsEnvelopeValue(double @typicalPanelWidth, string @facadeTypeName, double @parapetHeight)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridDefaultsEnvelopeValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @typicalPanelWidth, @facadeTypeName, @parapetHeight});
            }
        
            this.TypicalPanelWidth = @typicalPanelWidth;
            this.FacadeTypeName = @facadeTypeName;
            this.ParapetHeight = @parapetHeight;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Typical Panel Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TypicalPanelWidth { get; set; } = 3D;
    
        [Newtonsoft.Json.JsonProperty("Facade Type Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FacadeTypeName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Parapet Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ParapetHeight { get; set; } = 0D;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class GridsIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridsIdentity(Vector3 @normal, Vector3 @centroid, Vector3 @elementCentroid)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridsIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @normal, @centroid, @elementCentroid});
            }
        
            this.Normal = @normal;
            this.Centroid = @centroid;
            this.ElementCentroid = @elementCentroid;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Normal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vector3 Normal { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Centroid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vector3 Centroid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Element Centroid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vector3 ElementCentroid { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class GridsValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public GridsValue(Grid2dInput @grid, string @facadeTypeName)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<GridsValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @grid, @facadeTypeName});
            }
        
            this.Grid = @grid;
            this.FacadeTypeName = @facadeTypeName;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Adjust the grid for this portion of the facade.</summary>
        [Newtonsoft.Json.JsonProperty("Grid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Grid2dInput Grid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Facade Type Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FacadeTypeName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }
    
        public string Key { get; }
    
        public System.Type Type { get; }
    }
}