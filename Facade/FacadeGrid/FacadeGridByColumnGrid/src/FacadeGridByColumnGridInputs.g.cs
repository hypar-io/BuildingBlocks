// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Properties;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace FacadeGridByColumnGrid
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class FacadeGridByColumnGridInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public FacadeGridByColumnGridInputs(double @maxPanelWidth, double @minPanelWidth, double @offsetFromFacade, FacadeGridByColumnGridInputsDisplayMode @displayMode, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<FacadeGridByColumnGridInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @maxPanelWidth, @minPanelWidth, @offsetFromFacade, @displayMode});
            }
        
            this.MaxPanelWidth = @maxPanelWidth;
            this.MinPanelWidth = @minPanelWidth;
            this.OffsetFromFacade = @offsetFromFacade;
            this.DisplayMode = @displayMode;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>If a panel created by the column grid is wider than this value, it will be subdivided further. If set to zero, no subdivisions will be made.</summary>
        [Newtonsoft.Json.JsonProperty("Max Panel Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double MaxPanelWidth { get; set; } = 0D;
    
        /// <summary>If a column grid line is less than this distance from a corner, it will be ignored. If set to zero, all intersections will be used.</summary>
        [Newtonsoft.Json.JsonProperty("Min Panel Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 10D)]
        public double MinPanelWidth { get; set; } = 0D;
    
        /// <summary>Optionally, offset the facade grid at a distance from the base envelope.</summary>
        [Newtonsoft.Json.JsonProperty("Offset From Facade", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double OffsetFromFacade { get; set; } = 0D;
    
        [Newtonsoft.Json.JsonProperty("Display Mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FacadeGridByColumnGridInputsDisplayMode DisplayMode { get; set; } = FacadeGridByColumnGridInputsDisplayMode.Color_By_Type;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FacadeGridByColumnGridInputsDisplayMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Color By Type")]
        Color_By_Type = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Solid Color")]
        Solid_Color = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Edges Only")]
        Edges_Only = 2,
    
    }
}